#!/usr/bin/perl -w
# -*- cperl -*-

=head1 NAME

snmp__aironet_clients_multi - SNMP wildcard plugin to monitor associated clients or bridges on Cisco Aironet series.

=head1 APPLICABLE SYSTEMS

=head1 CONFIGURATION

As a rule SNMP plugins need site specific configuration.  The default
configuration (shown here) will only work on insecure sites/devices:

   [snmp_*]
	env.version 2
        env.community public

Please see 'perldoc Munin::Plugin::SNMP' for further configuration
information.

=head1 MAGIC MARKERS

  #%# family=snmpauto
  #%# capabilities=snmpconf

=head1 VERSION

  $Id$

=head1 AUTHOR

Akira KUMAGAI <kumaguy@gmail.com>

=head1 LICENSE

GPLv2

=cut

use strict;
use Munin::Plugin;
use Munin::Plugin::SNMP;
use List::Util qw/first/;
use Data::Dumper;
use Carp;

my $response;
my $iface;

my %cDot11ActiveMibs = (
  "cD11ActiveWlClient"  => ".1.3.6.1.4.1.9.9.273.1.1.2.1.1",
  "cD11ActiveBridges"   => ".1.3.6.1.4.1.9.9.273.1.1.2.1.2",
  "cD11ActiveRepeater"  => ".1.3.6.1.4.1.9.9.273.1.1.2.1.3",
);

my @ifDescrDo=[];
$ifDescrDo[0]         = ".1.3.6.1.2.1.2.2.1.2.1";
$ifDescrDo[1]         = ".1.3.6.1.2.1.2.2.1.2.2";

my $debug=0;

if (defined $ARGV[0] and $ARGV[0] eq "snmpconf") {
	print "require .1.3.6.1.4.1.9.9.273.1.1.2.\n"; 
	exit 0;
}

my ($session, $error);
my @hasDo = [];

$session = Munin::Plugin::SNMP->session();

my ($host,undef,$version) = Munin::Plugin::SNMP->config_session();
my $ifDescr;
foreach(@ifDescrDo)
{
 if(defined($ifDescr = $session->get_single($_))){
   if($ifDescr =~ /Dot11Radio(\d+)/){
     $hasDo[$1] = 1;
   }
 }
}

if($ARGV[0] and $ARGV[0] eq "config")
{
   print "host_name $host\n" unless $host eq 'localhost';

   print "graph_title Dot11 Active Associates\n";

	# has no any Dot11 interfaces.
	#exit;

    print "graph_order cD11ActiveWlClient1 cD11ActiveWlClient2 cD11ActiveBridges1 cD11ActiveBridges2 cD11ActiveRepeater1 cD11ActiveRepeater2\n";
    print "graph_vlabel counts\n";
    print "graph_category network\n";
    print "graph_info This graph shows counts of Dot11 active associates.\n";

    print "cD11ActiveWlClient1.info Dot11Radio0 (802.11b/g) Clients\n" if $hasDo[0];
    print "cD11ActiveWlClient2.info Dot11Radio1 (802.11a) Clients\n"   if $hasDo[1];
    print "cD11ActiveBridges1.info Dot11Radio0 (802.11b/g) Bridges\n"  if $hasDo[0];
    print "cD11ActiveBridges2.info Dot11Radio1 (802.11a) Bridges\n"    if $hasDo[1];
    print "cD11ActiveRepeater1.info Dot11Radio0 (802.11b/g) Bridges\n" if $hasDo[0];
    print "cD11ActiveRepeater2.info Dot11Radio1 (802.11a) Bridges\n"   if $hasDo[1];

    print "cD11ActiveWlClient1.label ActiveWlClient(Do0)\n" if $hasDo[0];
    print "cD11ActiveWlClient2.label ActiveWlClient(Do1)\n" if $hasDo[1];
    print "cD11ActiveBridges1.label ActiveBridges1\n"  if $hasDo[0];
    print "cD11ActiveBridges2.label ActiveBridges2\n"  if $hasDo[1];
    print "cD11ActiveRepeater1.label ActiveRepeater1\n" if $hasDo[0];
    print "cD11ActiveRepeater2.label ActiveRepeater2\n" if $hasDo[1];

    print "cD11ActiveWlClient1.type GAUGE\n" if $hasDo[0];
    print "cD11ActiveWlClient2.type GAUGE\n" if $hasDo[1];
    print "cD11ActiveBridges1.type GAUGE\n"  if $hasDo[0];
    print "cD11ActiveBridges2.type GAUGE\n"  if $hasDo[1];
    print "cD11ActiveRepeater1.type GAUGE\n" if $hasDo[0];
    print "cD11ActiveRepeater2.type GAUGE\n" if $hasDo[1];

    print "cD11ActiveWlClient1.draw LINE1\n"  if $hasDo[0];
    print "cD11ActiveWlClient2.draw LINE1\n"  if $hasDo[1];
    print "cD11ActiveBridges1.draw LINE1\n"   if $hasDo[0];
    print "cD11ActiveBridges2.draw LINE1\n"   if $hasDo[1];
    print "cD11ActiveRepeater1.draw LINE1\n"  if $hasDo[0];
    print "cD11ActiveRepeater2.draw LINE1\n"  if $hasDo[1];

    exit 0;
}


while(my($label, $mib) = each(%cDot11ActiveMibs))
{
  for(my $i=0; $i<2; $i++){
  if(! $hasDo[$i]){ next; }
   my $mibif = sprintf("%s.%d", $mib, $i+1);
   my $result = $session->get_single($mibif);
   if(!defined($result)){
     printf("%s%d.value U\n", $label, $i+1);
   }
   else{
     printf("%s%d.value %d\n", $label, $i+1, $result);
   }
  }
}


__END__
